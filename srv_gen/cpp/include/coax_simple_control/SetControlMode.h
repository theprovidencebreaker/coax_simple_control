/* Auto-generated by genmsg_cpp for file /home/ainsmar/ros_workspace/coax_simple_control/srv/SetControlMode.srv */
#ifndef COAX_SIMPLE_CONTROL_SERVICE_SETCONTROLMODE_H
#define COAX_SIMPLE_CONTROL_SERVICE_SETCONTROLMODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace coax_simple_control
{
template <class ContainerAllocator>
struct SetControlModeRequest_ {
  typedef SetControlModeRequest_<ContainerAllocator> Type;

  SetControlModeRequest_()
  : mode(0)
  {
  }

  SetControlModeRequest_(const ContainerAllocator& _alloc)
  : mode(0)
  {
  }

  typedef int8_t _mode_type;
  int8_t mode;


private:
  static const char* __s_getDataType_() { return "coax_simple_control/SetControlModeRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "418c02483a8ca57215fb7b31c5c87234"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b887f88391f1a13413ffd9a38fd72e8a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 mode\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, mode);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, mode);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(mode);
    return size;
  }

  typedef boost::shared_ptr< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetControlModeRequest
typedef  ::coax_simple_control::SetControlModeRequest_<std::allocator<void> > SetControlModeRequest;

typedef boost::shared_ptr< ::coax_simple_control::SetControlModeRequest> SetControlModeRequestPtr;
typedef boost::shared_ptr< ::coax_simple_control::SetControlModeRequest const> SetControlModeRequestConstPtr;


template <class ContainerAllocator>
struct SetControlModeResponse_ {
  typedef SetControlModeResponse_<ContainerAllocator> Type;

  SetControlModeResponse_()
  : result(0)
  {
  }

  SetControlModeResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


private:
  static const char* __s_getDataType_() { return "coax_simple_control/SetControlModeResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4414c67819626a1b8e0f043a9a0d6c9a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b887f88391f1a13413ffd9a38fd72e8a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 result\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetControlModeResponse
typedef  ::coax_simple_control::SetControlModeResponse_<std::allocator<void> > SetControlModeResponse;

typedef boost::shared_ptr< ::coax_simple_control::SetControlModeResponse> SetControlModeResponsePtr;
typedef boost::shared_ptr< ::coax_simple_control::SetControlModeResponse const> SetControlModeResponseConstPtr;

struct SetControlMode
{

typedef SetControlModeRequest Request;
typedef SetControlModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetControlMode
} // namespace coax_simple_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "418c02483a8ca57215fb7b31c5c87234";
  }

  static const char* value(const  ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x418c02483a8ca572ULL;
  static const uint64_t static_value2 = 0x15fb7b31c5c87234ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetControlModeRequest";
  }

  static const char* value(const  ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 mode\n\
\n\
";
  }

  static const char* value(const  ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetControlModeResponse";
  }

  static const char* value(const  ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_simple_control::SetControlModeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetControlModeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_simple_control::SetControlModeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetControlModeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coax_simple_control::SetControlMode> {
  static const char* value() 
  {
    return "b887f88391f1a13413ffd9a38fd72e8a";
  }

  static const char* value(const coax_simple_control::SetControlMode&) { return value(); } 
};

template<>
struct DataType<coax_simple_control::SetControlMode> {
  static const char* value() 
  {
    return "coax_simple_control/SetControlMode";
  }

  static const char* value(const coax_simple_control::SetControlMode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_simple_control::SetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b887f88391f1a13413ffd9a38fd72e8a";
  }

  static const char* value(const coax_simple_control::SetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_simple_control::SetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetControlMode";
  }

  static const char* value(const coax_simple_control::SetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_simple_control::SetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b887f88391f1a13413ffd9a38fd72e8a";
  }

  static const char* value(const coax_simple_control::SetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_simple_control::SetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetControlMode";
  }

  static const char* value(const coax_simple_control::SetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COAX_SIMPLE_CONTROL_SERVICE_SETCONTROLMODE_H

