/* Auto-generated by genmsg_cpp for file /home/ainsmar/ros_workspace/coax_simple_control/srv/SetWaypoint.srv */
#ifndef COAX_SIMPLE_CONTROL_SERVICE_SETWAYPOINT_H
#define COAX_SIMPLE_CONTROL_SERVICE_SETWAYPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace coax_simple_control
{
template <class ContainerAllocator>
struct SetWaypointRequest_ {
  typedef SetWaypointRequest_<ContainerAllocator> Type;

  SetWaypointRequest_()
  : way_x(0.0)
  , way_y(0.0)
  {
  }

  SetWaypointRequest_(const ContainerAllocator& _alloc)
  : way_x(0.0)
  , way_y(0.0)
  {
  }

  typedef double _way_x_type;
  double way_x;

  typedef double _way_y_type;
  double way_y;


private:
  static const char* __s_getDataType_() { return "coax_simple_control/SetWaypointRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "80feddf2cabf62c6df1c5e50585cccd0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fd3ab5378b9774d100960ee0ab169b03"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 way_x\n\
float64 way_y\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, way_x);
    ros::serialization::serialize(stream, way_y);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, way_x);
    ros::serialization::deserialize(stream, way_y);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(way_x);
    size += ros::serialization::serializationLength(way_y);
    return size;
  }

  typedef boost::shared_ptr< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetWaypointRequest
typedef  ::coax_simple_control::SetWaypointRequest_<std::allocator<void> > SetWaypointRequest;

typedef boost::shared_ptr< ::coax_simple_control::SetWaypointRequest> SetWaypointRequestPtr;
typedef boost::shared_ptr< ::coax_simple_control::SetWaypointRequest const> SetWaypointRequestConstPtr;


template <class ContainerAllocator>
struct SetWaypointResponse_ {
  typedef SetWaypointResponse_<ContainerAllocator> Type;

  SetWaypointResponse_()
  : result(0)
  {
  }

  SetWaypointResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


private:
  static const char* __s_getDataType_() { return "coax_simple_control/SetWaypointResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4414c67819626a1b8e0f043a9a0d6c9a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fd3ab5378b9774d100960ee0ab169b03"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 result\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetWaypointResponse
typedef  ::coax_simple_control::SetWaypointResponse_<std::allocator<void> > SetWaypointResponse;

typedef boost::shared_ptr< ::coax_simple_control::SetWaypointResponse> SetWaypointResponsePtr;
typedef boost::shared_ptr< ::coax_simple_control::SetWaypointResponse const> SetWaypointResponseConstPtr;

struct SetWaypoint
{

typedef SetWaypointRequest Request;
typedef SetWaypointResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetWaypoint
} // namespace coax_simple_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80feddf2cabf62c6df1c5e50585cccd0";
  }

  static const char* value(const  ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x80feddf2cabf62c6ULL;
  static const uint64_t static_value2 = 0xdf1c5e50585cccd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetWaypointRequest";
  }

  static const char* value(const  ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 way_x\n\
float64 way_y\n\
\n\
";
  }

  static const char* value(const  ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetWaypointResponse";
  }

  static const char* value(const  ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_simple_control::SetWaypointRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.way_x);
    stream.next(m.way_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetWaypointRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_simple_control::SetWaypointResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetWaypointResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coax_simple_control::SetWaypoint> {
  static const char* value() 
  {
    return "fd3ab5378b9774d100960ee0ab169b03";
  }

  static const char* value(const coax_simple_control::SetWaypoint&) { return value(); } 
};

template<>
struct DataType<coax_simple_control::SetWaypoint> {
  static const char* value() 
  {
    return "coax_simple_control/SetWaypoint";
  }

  static const char* value(const coax_simple_control::SetWaypoint&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_simple_control::SetWaypointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd3ab5378b9774d100960ee0ab169b03";
  }

  static const char* value(const coax_simple_control::SetWaypointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_simple_control::SetWaypointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetWaypoint";
  }

  static const char* value(const coax_simple_control::SetWaypointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_simple_control::SetWaypointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd3ab5378b9774d100960ee0ab169b03";
  }

  static const char* value(const coax_simple_control::SetWaypointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_simple_control::SetWaypointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_simple_control/SetWaypoint";
  }

  static const char* value(const coax_simple_control::SetWaypointResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COAX_SIMPLE_CONTROL_SERVICE_SETWAYPOINT_H

